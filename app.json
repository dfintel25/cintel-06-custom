[{"name": "app.py", "content": "from pathlib import Path\n\nimport pandas as pd\nimport plotly.graph_objects as go\nimport yfinance as yf\nfrom faicons import icon_svg\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shinywidgets import output_widget, render_plotly\nfrom stocks import stocks\nfrom datetime import datetime\n\n# Default to the last 6 months\nend = pd.Timestamp.now()\nstart = end - pd.Timedelta(weeks=26)\n\napp_dir = Path(__file__).parent\n\nfrom datetime import datetime\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.h2(\"Stock Explorer\", class_=\"text-center\"),\n        ui.p(\n            \"An interactive tool for exploring stock price data and trends.\",\n            class_=\"text-center\",\n        ),\n        ui.hr(),\n\n        ui.input_selectize(\"ticker\", \"Select Stocks\", choices=stocks, selected=\"AAPL\"),\n        ui.input_date_range(\"dates\", \"Select dates\", start=start, end=end),\n\n        ui.hr(),\n        ui.h6(\"Links:\"),\n        ui.a(\n            \"dfintel25 GitHub\",\n            href=\"https://github.com/dfintel25\",\n            target=\"_blank\",\n        ),\n        ui.a(\n            \"GitHub Repo for this app\",\n            href=\"https://github.com/dfintel25/cintel-06-custom\",\n            target=\"_blank\",\n        ),\n        ui.a(\n            \"Stock Price Tracker; Template from Shiny\",\n            href=\"https://shiny.posit.co/py/templates/stock-app/\",\n            target=\"_blank\",\n        ),\n        ui.a(\"Stock Price Tracker GitHub\", href=\"https://github.com/posit-dev/py-shiny-templates/tree/main/stock-app\", target=\"_blank\"),\n        ui.a(\n            \"PyShiny Express\",\n            href=\"https://shiny.posit.co/blog/posts/shiny-express/\",\n            target=\"_blank\",\n        ),\n        ui.hr(),\n        ui.h6(f\"Last updated: {datetime.now().strftime('%H:%M:%S')}\")\n    ),\n    ui.layout_column_wrap(\n        ui.value_box(\n            \"Current Price\",\n            ui.output_ui(\"price\"),\n            showcase=icon_svg(\"dollar-sign\"),\n        ),\n        ui.value_box(\n            \"Change\",\n            ui.output_ui(\"change\"),\n            showcase=ui.output_ui(\"change_icon\"),\n        ),\n        ui.value_box(\n            \"Percent Change\",\n            ui.output_ui(\"change_percent\"),\n            showcase=icon_svg(\"percent\"),\n        ),\n        fill=False,\n    ),\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\"Price history\"),\n            output_widget(\"price_history\"),\n            full_screen=True,\n        ),\n        ui.card(\n            ui.card_header(\"Latest data\"),\n            ui.output_data_frame(\"latest_data\"),\n        ),\n        col_widths=[9, 3],\n    ),\n    ui.include_css(app_dir / \"styles.css\"),\n    title=\"Stock explorer\",\n    fillable=True,\n)\n\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.calc\n    def get_ticker():\n        return yf.Ticker(input.ticker())\n\n    @reactive.calc\n    def get_data():\n        dates = input.dates()\n        return get_ticker().history(start=dates[0], end=dates[1])\n\n    @reactive.calc\n    def get_change():\n        close = get_data()[\"Close\"]\n        return close.iloc[-1] - close.iloc[-2]\n\n    @reactive.calc\n    def get_change_percent():\n        close = get_data()[\"Close\"]\n        change = close.iloc[-1] - close.iloc[-2]\n        return change / close.iloc[-2] * 100\n\n    @render.ui\n    def price():\n        close = get_data()[\"Close\"]\n        return f\"{close.iloc[-1]:.2f}\"\n\n    @render.ui\n    def change():\n        return f\"${get_change():.2f}\"\n\n    @render.ui\n    def change_icon():\n        change = get_change()\n        icon = icon_svg(\"arrow-up\" if change >= 0 else \"arrow-down\")\n        icon.add_class(f\"text-{('success' if change >= 0 else 'danger')}\")\n        return icon\n\n    @render.ui\n    def change_percent():\n        return f\"{get_change_percent():.2f}%\"\n\n    @render_plotly\n    def price_history():\n        df = get_data().reset_index()\n        fig = go.Figure(\n            data=[\n                go.Candlestick(\n                    x=df[\"Date\"],\n                    open=df[\"Open\"],\n                    high=df[\"High\"],\n                    low=df[\"Low\"],\n                    close=df[\"Close\"],\n                    increasing_line_color=\"#44bb70\",\n                    decreasing_line_color=\"#040548\",\n                    name=input.ticker(),\n                )\n            ]\n        )\n        df[\"SMA\"] = df[\"Close\"].rolling(window=20).mean()\n        fig.add_scatter(\n            x=df[\"Date\"],\n            y=df[\"SMA\"],\n            mode=\"lines\",\n            name=\"SMA (20)\",\n            line={\"color\": \"orange\", \"dash\": \"dash\"},\n        )\n        fig.update_layout(\n            hovermode=\"x unified\",\n            legend={\n                \"orientation\": \"h\",\n                \"yanchor\": \"top\",\n                \"y\": 1,\n                \"xanchor\": \"right\",\n                \"x\": 1,\n            },\n            paper_bgcolor=\"rgba(0,0,0,0)\",\n            plot_bgcolor=\"rgba(0,0,0,0)\",\n        )\n        return fig\n\n    @render.data_frame\n    def latest_data():\n        data = get_data()[:1]  # Get latest row\n\n        data.index = data.index.astype(str)\n        data = data.T\n\n        result = pd.DataFrame(\n            {\n                \"Category\": data.index,\n                \"Value\": data.values.flatten(),  # Flatten to 1D array\n            }\n        )\n\n        # Format values\n        result[\"Value\"] = result[\"Value\"].apply(lambda v: f\"{v:.1f}\")\n        return result\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "README.md", "content": "# cintel-06-custom\nRepo for 44630: Custom Interactive App\n\n### Preliminary Setup Steps\n### 1. Initialize\n```\n1. Click \"New Repository\"\n    a. Generate name with no spaces\n    b. Add a \"README.md\"\n2. Clone Repository to machine via VS Code\n    a. Create folder in \"C:\\Projects\"\n3. Install requirements.txt\n4. Setup gitignore\n5. Test example scripts in .venv\n```\n### 2. Create Project Virtual Environment\n```\npy -m venv .venv\n.venv\\Scripts\\Activate\npy -m pip install --upgrade pip \npy -m pip install -r requirements.txt\nRetrieve installed items: !pip list\n```\n### 3. Git add, clone, and commit\n```\ngit add .\ngit clone \"urlexample.git\"\ngit commit -m \"add .gitignore, cmds to readme\"\ngit push -u origin main\n```\n### 4. If copying a repository:\n```\n1. Click \"Use this template\" on this example repository (if it's not a template, click \"Fork\" instead).\n2. Clone the repository to your machine:\n   git clone example-repo-url\n3. Open your new cloned repository in VS Code.\n```\n### 5. spaCy Specific Installs\n```\n1. pip install -U pip setuptools wheel\n2. pip install -U spacy\n3. python -m spacy download en_core_web_sm\n```\n### 6. HTML Export\n```\nimport os os.system('jupyter nbconvert --to html python-ds.ipynb')\n```\n### 7. Specific Module 6 Imports\npython -m pip install beautifulsoup4\npython -m pip install html5lib\npython -m pip install requests\npython -m pip install spacy\npython -m pip install spacytextblob", "type": "text"}, {"name": "_template.json", "content": "{\n  \"id\": \"stock-app\",\n  \"title\": \"Stock price tracker\",\n  \"description\": \"A basic stock price tracker app.\"\n}", "type": "text"}, {"name": "requirements.txt", "content": "plotly\nyfinance\npandas\nshiny\nshinywidgets\nfaicons\n", "type": "text"}, {"name": "stocks.py", "content": "stocks = {\n    \"AAPL\": \"Apple Inc.\",\n    \"MSFT\": \"Microsoft Corporation\",\n    \"AMZN\": \"Amazon.com, Inc.\",\n    \"GOOGL\": \"Alphabet Inc.\",\n    \"META\": \"Meta Platforms\",\n    \"BRK-A\": \"Berkshire Hathaway Inc.\",\n    \"V\": \"Visa Inc.\",\n    \"JNJ\": \"Johnson & Johnson\",\n    \"WMT\": \"Walmart Inc.\",\n    \"JPM\": \"JPMorgan Chase & Co.\",\n    \"MA\": \"Mastercard Incorporated\",\n    \"PG\": \"The Procter & Gamble Company\",\n    \"UNH\": \"UnitedHealth Group Incorporated\",\n    \"DIS\": \"The Walt Disney Company\",\n    \"HD\": \"The Home Depot, Inc.\",\n    \"BAC\": \"Bank of America Corporation\",\n    \"NVDA\": \"NVIDIA Corporation\",\n    \"PYPL\": \"PayPal Holdings, Inc.\",\n    \"CMCSA\": \"Comcast Corporation\",\n    \"NFLX\": \"Netflix, Inc.\",\n    \"ADBE\": \"Adobe Inc.\",\n    \"KO\": \"The Coca-Cola Company\",\n    \"NKE\": \"NIKE, Inc.\",\n    \"MRK\": \"Merck & Co., Inc.\",\n    \"PEP\": \"PepsiCo, Inc.\",\n    \"T\": \"AT&T Inc.\",\n    \"PFE\": \"Pfizer Inc.\",\n    \"INTC\": \"Intel Corporation\",\n    \"CSCO\": \"Cisco Systems, Inc.\",\n    \"CRM\": \"salesforce.com, inc.\",\n    \"XOM\": \"Exxon Mobil Corporation\",\n}", "type": "text"}, {"name": "styles.css", "content": ":root {\n  --bslib-sidebar-main-bg: #f8f8f8;\n}\n\n.plotly .modebar-container {\n  display: none !important;\n}", "type": "text"}]